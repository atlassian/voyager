// Generated code
// run `make generate` to update

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	trebuchetv1 "github.com/atlassian/voyager/pkg/apis/trebuchet/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeReleases implements ReleaseInterface
type FakeReleases struct {
	Fake *FakeTrebuchetV1
}

var releasesResource = schema.GroupVersionResource{Group: "trebuchet", Version: "v1", Resource: "releases"}

var releasesKind = schema.GroupVersionKind{Group: "trebuchet", Version: "v1", Kind: "Release"}

// Get takes name of the release, and returns the corresponding release object, and an error if there is any.
func (c *FakeReleases) Get(name string, options v1.GetOptions) (result *trebuchetv1.Release, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(releasesResource, name), &trebuchetv1.Release{})
	if obj == nil {
		return nil, err
	}
	return obj.(*trebuchetv1.Release), err
}

// List takes label and field selectors, and returns the list of Releases that match those selectors.
func (c *FakeReleases) List(opts v1.ListOptions) (result *trebuchetv1.ReleaseList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(releasesResource, releasesKind, opts), &trebuchetv1.ReleaseList{})
	if obj == nil {
		return nil, err
	}
	return obj.(*trebuchetv1.ReleaseList), err
}

// Watch returns a watch.Interface that watches the requested releases.
func (c *FakeReleases) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(releasesResource, opts))
}

// Create takes the representation of a release and creates it.  Returns the server's representation of the release, and an error, if there is any.
func (c *FakeReleases) Create(release *trebuchetv1.Release) (result *trebuchetv1.Release, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(releasesResource, release), &trebuchetv1.Release{})
	if obj == nil {
		return nil, err
	}
	return obj.(*trebuchetv1.Release), err
}

// Update takes the representation of a release and updates it. Returns the server's representation of the release, and an error, if there is any.
func (c *FakeReleases) Update(release *trebuchetv1.Release) (result *trebuchetv1.Release, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(releasesResource, release), &trebuchetv1.Release{})
	if obj == nil {
		return nil, err
	}
	return obj.(*trebuchetv1.Release), err
}

// Delete takes name of the release and deletes it. Returns an error if one occurs.
func (c *FakeReleases) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(releasesResource, name), &trebuchetv1.Release{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeReleases) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(releasesResource, listOptions)

	_, err := c.Fake.Invokes(action, &trebuchetv1.ReleaseList{})
	return err
}

// Patch applies the patch and returns the patched release.
func (c *FakeReleases) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *trebuchetv1.Release, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(releasesResource, name, pt, data, subresources...), &trebuchetv1.Release{})
	if obj == nil {
		return nil, err
	}
	return obj.(*trebuchetv1.Release), err
}
