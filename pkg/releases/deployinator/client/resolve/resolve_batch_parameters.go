// Code generated by go-swagger; DO NOT EDIT.

package resolve

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewResolveBatchParams creates a new ResolveBatchParams object
// with the default values initialized.
func NewResolveBatchParams() *ResolveBatchParams {
	var ()
	return &ResolveBatchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewResolveBatchParamsWithTimeout creates a new ResolveBatchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewResolveBatchParamsWithTimeout(timeout time.Duration) *ResolveBatchParams {
	var ()
	return &ResolveBatchParams{

		timeout: timeout,
	}
}

// NewResolveBatchParamsWithContext creates a new ResolveBatchParams object
// with the default values initialized, and the ability to set a context for a request
func NewResolveBatchParamsWithContext(ctx context.Context) *ResolveBatchParams {
	var ()
	return &ResolveBatchParams{

		Context: ctx,
	}
}

// NewResolveBatchParamsWithHTTPClient creates a new ResolveBatchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewResolveBatchParamsWithHTTPClient(client *http.Client) *ResolveBatchParams {
	var ()
	return &ResolveBatchParams{
		HTTPClient: client,
	}
}

/*ResolveBatchParams contains all the parameters to send to the API endpoint
for the resolve batch operation typically these are written to a http.Request
*/
type ResolveBatchParams struct {

	/*Account*/
	Account *string
	/*Environment*/
	Environment *string
	/*From*/
	From *string
	/*Page*/
	Page *int32
	/*Region*/
	Region *string
	/*To*/
	To *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the resolve batch params
func (o *ResolveBatchParams) WithTimeout(timeout time.Duration) *ResolveBatchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resolve batch params
func (o *ResolveBatchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resolve batch params
func (o *ResolveBatchParams) WithContext(ctx context.Context) *ResolveBatchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resolve batch params
func (o *ResolveBatchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resolve batch params
func (o *ResolveBatchParams) WithHTTPClient(client *http.Client) *ResolveBatchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resolve batch params
func (o *ResolveBatchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccount adds the account to the resolve batch params
func (o *ResolveBatchParams) WithAccount(account *string) *ResolveBatchParams {
	o.SetAccount(account)
	return o
}

// SetAccount adds the account to the resolve batch params
func (o *ResolveBatchParams) SetAccount(account *string) {
	o.Account = account
}

// WithEnvironment adds the environment to the resolve batch params
func (o *ResolveBatchParams) WithEnvironment(environment *string) *ResolveBatchParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the resolve batch params
func (o *ResolveBatchParams) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithFrom adds the from to the resolve batch params
func (o *ResolveBatchParams) WithFrom(from *string) *ResolveBatchParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the resolve batch params
func (o *ResolveBatchParams) SetFrom(from *string) {
	o.From = from
}

// WithPage adds the page to the resolve batch params
func (o *ResolveBatchParams) WithPage(page *int32) *ResolveBatchParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the resolve batch params
func (o *ResolveBatchParams) SetPage(page *int32) {
	o.Page = page
}

// WithRegion adds the region to the resolve batch params
func (o *ResolveBatchParams) WithRegion(region *string) *ResolveBatchParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the resolve batch params
func (o *ResolveBatchParams) SetRegion(region *string) {
	o.Region = region
}

// WithTo adds the to to the resolve batch params
func (o *ResolveBatchParams) WithTo(to *string) *ResolveBatchParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the resolve batch params
func (o *ResolveBatchParams) SetTo(to *string) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *ResolveBatchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Account != nil {

		// query param account
		var qrAccount string
		if o.Account != nil {
			qrAccount = *o.Account
		}
		qAccount := qrAccount
		if qAccount != "" {
			if err := r.SetQueryParam("account", qAccount); err != nil {
				return err
			}
		}

	}

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string
		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {
			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom string
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Region != nil {

		// query param region
		var qrRegion string
		if o.Region != nil {
			qrRegion = *o.Region
		}
		qRegion := qrRegion
		if qRegion != "" {
			if err := r.SetQueryParam("region", qRegion); err != nil {
				return err
			}
		}

	}

	if o.To != nil {

		// query param to
		var qrTo string
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
