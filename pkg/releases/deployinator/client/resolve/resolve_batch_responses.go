// Code generated by go-swagger; DO NOT EDIT.

package resolve

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/atlassian/voyager/pkg/releases/deployinator/models"
)

// ResolveBatchReader is a Reader for the ResolveBatch structure.
type ResolveBatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResolveBatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewResolveBatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewResolveBatchNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewResolveBatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewResolveBatchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewResolveBatchOK creates a ResolveBatchOK with default headers values
func NewResolveBatchOK() *ResolveBatchOK {
	return &ResolveBatchOK{}
}

/*ResolveBatchOK handles this case with default header values.

A map of resolved release groups for each service found for the given location set.
*/
type ResolveBatchOK struct {
	Payload *models.BatchResolutionResponseType
}

func (o *ResolveBatchOK) Error() string {
	return fmt.Sprintf("[GET /v1/resolve/batch][%d] resolveBatchOK  %+v", 200, o.Payload)
}

func (o *ResolveBatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BatchResolutionResponseType)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResolveBatchNoContent creates a ResolveBatchNoContent with default headers values
func NewResolveBatchNoContent() *ResolveBatchNoContent {
	return &ResolveBatchNoContent{}
}

/*ResolveBatchNoContent handles this case with default header values.

No results for the given request
*/
type ResolveBatchNoContent struct {
	Payload *models.ErrorResponse
}

func (o *ResolveBatchNoContent) Error() string {
	return fmt.Sprintf("[GET /v1/resolve/batch][%d] resolveBatchNoContent  %+v", 204, o.Payload)
}

func (o *ResolveBatchNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResolveBatchBadRequest creates a ResolveBatchBadRequest with default headers values
func NewResolveBatchBadRequest() *ResolveBatchBadRequest {
	return &ResolveBatchBadRequest{}
}

/*ResolveBatchBadRequest handles this case with default header values.

Bad request
*/
type ResolveBatchBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *ResolveBatchBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/resolve/batch][%d] resolveBatchBadRequest  %+v", 400, o.Payload)
}

func (o *ResolveBatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResolveBatchInternalServerError creates a ResolveBatchInternalServerError with default headers values
func NewResolveBatchInternalServerError() *ResolveBatchInternalServerError {
	return &ResolveBatchInternalServerError{}
}

/*ResolveBatchInternalServerError handles this case with default header values.

Unknown error has occurred
*/
type ResolveBatchInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ResolveBatchInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/resolve/batch][%d] resolveBatchInternalServerError  %+v", 500, o.Payload)
}

func (o *ResolveBatchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
