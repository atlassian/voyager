// Code generated by go-swagger; DO NOT EDIT.

package resolve

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewResolveParams creates a new ResolveParams object
// with the default values initialized.
func NewResolveParams() *ResolveParams {
	var ()
	return &ResolveParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewResolveParamsWithTimeout creates a new ResolveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewResolveParamsWithTimeout(timeout time.Duration) *ResolveParams {
	var ()
	return &ResolveParams{

		timeout: timeout,
	}
}

// NewResolveParamsWithContext creates a new ResolveParams object
// with the default values initialized, and the ability to set a context for a request
func NewResolveParamsWithContext(ctx context.Context) *ResolveParams {
	var ()
	return &ResolveParams{

		Context: ctx,
	}
}

// NewResolveParamsWithHTTPClient creates a new ResolveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewResolveParamsWithHTTPClient(client *http.Client) *ResolveParams {
	var ()
	return &ResolveParams{
		HTTPClient: client,
	}
}

/*ResolveParams contains all the parameters to send to the API endpoint
for the resolve operation typically these are written to a http.Request
*/
type ResolveParams struct {

	/*Account*/
	Account *string
	/*Environment*/
	Environment *string
	/*Label*/
	Label *string
	/*Region*/
	Region *string
	/*Service*/
	Service *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the resolve params
func (o *ResolveParams) WithTimeout(timeout time.Duration) *ResolveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resolve params
func (o *ResolveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resolve params
func (o *ResolveParams) WithContext(ctx context.Context) *ResolveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resolve params
func (o *ResolveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resolve params
func (o *ResolveParams) WithHTTPClient(client *http.Client) *ResolveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resolve params
func (o *ResolveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccount adds the account to the resolve params
func (o *ResolveParams) WithAccount(account *string) *ResolveParams {
	o.SetAccount(account)
	return o
}

// SetAccount adds the account to the resolve params
func (o *ResolveParams) SetAccount(account *string) {
	o.Account = account
}

// WithEnvironment adds the environment to the resolve params
func (o *ResolveParams) WithEnvironment(environment *string) *ResolveParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the resolve params
func (o *ResolveParams) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithLabel adds the label to the resolve params
func (o *ResolveParams) WithLabel(label *string) *ResolveParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the resolve params
func (o *ResolveParams) SetLabel(label *string) {
	o.Label = label
}

// WithRegion adds the region to the resolve params
func (o *ResolveParams) WithRegion(region *string) *ResolveParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the resolve params
func (o *ResolveParams) SetRegion(region *string) {
	o.Region = region
}

// WithService adds the service to the resolve params
func (o *ResolveParams) WithService(service *string) *ResolveParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the resolve params
func (o *ResolveParams) SetService(service *string) {
	o.Service = service
}

// WriteToRequest writes these params to a swagger request
func (o *ResolveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Account != nil {

		// query param account
		var qrAccount string
		if o.Account != nil {
			qrAccount = *o.Account
		}
		qAccount := qrAccount
		if qAccount != "" {
			if err := r.SetQueryParam("account", qAccount); err != nil {
				return err
			}
		}

	}

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string
		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {
			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}

	}

	if o.Label != nil {

		// query param label
		var qrLabel string
		if o.Label != nil {
			qrLabel = *o.Label
		}
		qLabel := qrLabel
		if qLabel != "" {
			if err := r.SetQueryParam("label", qLabel); err != nil {
				return err
			}
		}

	}

	if o.Region != nil {

		// query param region
		var qrRegion string
		if o.Region != nil {
			qrRegion = *o.Region
		}
		qRegion := qrRegion
		if qRegion != "" {
			if err := r.SetQueryParam("region", qRegion); err != nil {
				return err
			}
		}

	}

	if o.Service != nil {

		// query param service
		var qrService string
		if o.Service != nil {
			qrService = *o.Service
		}
		qService := qrService
		if qService != "" {
			if err := r.SetQueryParam("service", qService); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
