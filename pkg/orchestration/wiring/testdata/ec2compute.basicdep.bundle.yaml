apiVersion: smith.atlassian.com/v1
kind: Bundle
metadata:
  creationTimestamp: null
  name: ptl-percolator
  namespace: ptl-percolator
  ownerReferences:
  - apiVersion: orchestration.voyager.atl-paas.net/v1
    blockOwnerDeletion: true
    controller: true
    kind: State
    name: ptl-percolator
    uid: ""
spec:
  resources:
  - name: basic--instance
    spec:
      object:
        apiVersion: servicecatalog.k8s.io/v1beta1
        kind: ServiceInstance
        metadata:
          annotations:
            voyager.atl-paas.net/envResourcePrefix: sqs
          name: basic
        spec:
          clusterServiceClassExternalID: 06068066-7f66-4297-8683-a1ba0a2b7401
          clusterServicePlanExternalID: 56393d2c-d936-4634-a178-19f491a3551a
          parameters:
            environment:
              lowPriorityPagerdutyEndpoint: https://events.pagerduty.com/adapter/cloudwatch_sns/v1/12312312312312312312312312312312
              pagerdutyEndpoint: https://events.pagerduty.com/adapter/cloudwatch_sns/v1/12312312312312312312312312312312
              tags:
                business_unit: some_unit
                environment: microstestenv
                environment_type: testenv
                platform: voyager
                resource_owner: an_owner
                service_name: test-servicename
            resource:
              name: basic
              type: sqs
            serviceName: test-servicename
  - name: compute--basic--binding
    references:
    - example: aname
      name: basic--instance-metadata-name
      path: metadata.name
      resource: basic--instance
    spec:
      object:
        apiVersion: servicecatalog.k8s.io/v1beta1
        kind: ServiceBinding
        metadata:
          name: compute--basic
        spec:
          instanceRef:
            name: '!{basic--instance-metadata-name}'
          secretName: compute--basic
  - name: compute--secretenvvar
    references:
    - resource: compute--basic--binding
    spec:
      plugin:
        name: secretenvvar
        objectName: compute--secretenvvar
        spec:
          ignoreKeyRegex: "(?i)IamPolicySnippet$"
          outputJsonKey: "secretEnvVars"
          outputSecretKey: "ec2ComputeEnvVars"
  - name: compute---iamrole
    references:
    - resource: compute--basic--binding
    spec:
      plugin:
        name: iamrole
        objectName: compute---iamrole
        spec:
          assumeRoles:
          - arn:aws:iam::123456789012:role/micros-server-iam-MicrosServer-ABC
          computeType: ec2Compute
          createInstanceProfile: true
          managedPolicies:
          - arn:aws:iam::123456789012:policy/SOX-DENY-IAM-CREATE-DELETE
          - arn:aws:iam::123456789012:policy/micros-iam-DefaultServicePolicy-ABC
          oapResourceName: compute-iamrole
          serviceEnvironment:
            lowPriorityPagerdutyEndpoint: https://events.pagerduty.com/adapter/cloudwatch_sns/v1/12312312312312312312312312312312
            notificationEmail: an_owner@example.com
            pagerdutyEndpoint: https://events.pagerduty.com/adapter/cloudwatch_sns/v1/12312312312312312312312312312312
            primaryVpcEnvironment:
              appSubnets:
              - subnet-1
              - subnet-2
              instanceSecurityGroup: sg-2
              jumpboxSecurityGroup: sg-1
              privateDnsZone: testregion.atl-inf.io
              privatePaasDnsZone: testregion.dev.paas-inf.net
              region: testregion
              sslCertificateId: arn:aws:acm:testregion:123456789012:certificate/253b42fa-047c-44c2-8bac-777777777777
              vpcId: vpc-1
              zones:
              - testregiona
              - testregionb
            tags:
              business_unit: some_unit
              environment: microstestenv
              environment_type: testenv
              platform: voyager
              resource_owner: an_owner
              service_name: test-servicename
          serviceId: test-servicename-compute
  - name: compute---iamrole-binding
    references:
    - name: compute---iamrole-metadata-name
      path: metadata.name
      resource: compute---iamrole
    spec:
      object:
        apiVersion: servicecatalog.k8s.io/v1beta1
        kind: ServiceBinding
        metadata:
          name: compute---iamrole
        spec:
          instanceRef:
            name: '!{compute---iamrole-metadata-name}'
          secretName: compute---iamrole
  - name: compute--instance
    references:
    - name: compute--secretenvvar-metadata-name
      path: metadata.name
      resource: compute--secretenvvar
    - example: arn:aws:iam::123456789012:role/path/role
      modifier: bindsecret
      name: compute---iamrole-binding-IAMRoleARN
      path: data.IAMRoleARN
      resource: compute---iamrole-binding
    - example: arn:aws:iam::123456789012:instance-profile/path/Webserver
      modifier: bindsecret
      name: compute---iamrole-binding-InstanceProfileARN
      path: data.InstanceProfileARN
      resource: compute---iamrole-binding
    spec:
      object:
        apiVersion: servicecatalog.k8s.io/v1beta1
        kind: ServiceInstance
        metadata:
          name: compute
        spec:
          clusterServiceClassExternalName: micros
          clusterServicePlanExternalName: v2
          parameters:
            autoScalingGroup:
              maxSize: 2
              minSize: 1
            docker:
              compose:
                backendapp:
                  image: docker.example.com/my-app
                  ports:
                  - 8080:8080
                  tag: "1.0"
              envVars:
                ASAP_PUBLIC_KEY_FALLBACK_REPOSITORY_URL: https://asap-distribution.us-east-1.staging.paas-inf.net/
                ASAP_PUBLIC_KEY_REPOSITORY_URL: https://asap-distribution.us-west-1.staging.paas-inf.net/
                key: value
            ec2:
              iamInstanceProfileArn: '!{compute---iamrole-binding-InstanceProfileARN}'
              iamRoleArn: '!{compute---iamrole-binding-IAMRoleARN}'
              instanceType: t2.small
            location:
              account: testaccount
              envType: testenv
              region: testregion
            meaninglesskey: used as an example
            notifications:
              email: notification@email.com
              pagerduty:
                cloudwatch: https://events.pagerduty.com/adapter/cloudwatch_sns/v1/12312312312312312312312312312312
                generic: "123123123123123"
                lowPriority: https://events.pagerduty.com/adapter/cloudwatch_sns/v1/12312312312312312312312312312312
            service:
              id: test-servicename-compute
              loggingId: logging-id-from-configmap
              ssamAccessLevel: access-level-from-configmap
            tags:
              business_unit: some_unit
              platform: voyager
              resource_owner: an_owner
          parametersFrom:
          - secretKeyRef:
              key: ec2ComputeEnvVars
              name: '!{compute--secretenvvar-metadata-name}'
status: {}
