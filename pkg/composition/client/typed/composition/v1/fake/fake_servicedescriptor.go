// Generated code
// run `make generate` to update

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	compositionv1 "github.com/atlassian/voyager/pkg/apis/composition/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeServiceDescriptors implements ServiceDescriptorInterface
type FakeServiceDescriptors struct {
	Fake *FakeCompositionV1
}

var servicedescriptorsResource = schema.GroupVersionResource{Group: "composition.voyager.atl-paas.net", Version: "v1", Resource: "servicedescriptors"}

var servicedescriptorsKind = schema.GroupVersionKind{Group: "composition.voyager.atl-paas.net", Version: "v1", Kind: "ServiceDescriptor"}

// Get takes name of the serviceDescriptor, and returns the corresponding serviceDescriptor object, and an error if there is any.
func (c *FakeServiceDescriptors) Get(name string, options v1.GetOptions) (result *compositionv1.ServiceDescriptor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(servicedescriptorsResource, name), &compositionv1.ServiceDescriptor{})
	if obj == nil {
		return nil, err
	}
	return obj.(*compositionv1.ServiceDescriptor), err
}

// List takes label and field selectors, and returns the list of ServiceDescriptors that match those selectors.
func (c *FakeServiceDescriptors) List(opts v1.ListOptions) (result *compositionv1.ServiceDescriptorList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(servicedescriptorsResource, servicedescriptorsKind, opts), &compositionv1.ServiceDescriptorList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &compositionv1.ServiceDescriptorList{ListMeta: obj.(*compositionv1.ServiceDescriptorList).ListMeta}
	for _, item := range obj.(*compositionv1.ServiceDescriptorList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested serviceDescriptors.
func (c *FakeServiceDescriptors) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(servicedescriptorsResource, opts))
}

// Create takes the representation of a serviceDescriptor and creates it.  Returns the server's representation of the serviceDescriptor, and an error, if there is any.
func (c *FakeServiceDescriptors) Create(serviceDescriptor *compositionv1.ServiceDescriptor) (result *compositionv1.ServiceDescriptor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(servicedescriptorsResource, serviceDescriptor), &compositionv1.ServiceDescriptor{})
	if obj == nil {
		return nil, err
	}
	return obj.(*compositionv1.ServiceDescriptor), err
}

// Update takes the representation of a serviceDescriptor and updates it. Returns the server's representation of the serviceDescriptor, and an error, if there is any.
func (c *FakeServiceDescriptors) Update(serviceDescriptor *compositionv1.ServiceDescriptor) (result *compositionv1.ServiceDescriptor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(servicedescriptorsResource, serviceDescriptor), &compositionv1.ServiceDescriptor{})
	if obj == nil {
		return nil, err
	}
	return obj.(*compositionv1.ServiceDescriptor), err
}

// Delete takes name of the serviceDescriptor and deletes it. Returns an error if one occurs.
func (c *FakeServiceDescriptors) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(servicedescriptorsResource, name), &compositionv1.ServiceDescriptor{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeServiceDescriptors) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(servicedescriptorsResource, listOptions)

	_, err := c.Fake.Invokes(action, &compositionv1.ServiceDescriptorList{})
	return err
}

// Patch applies the patch and returns the patched serviceDescriptor.
func (c *FakeServiceDescriptors) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *compositionv1.ServiceDescriptor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(servicedescriptorsResource, name, pt, data, subresources...), &compositionv1.ServiceDescriptor{})
	if obj == nil {
		return nil, err
	}
	return obj.(*compositionv1.ServiceDescriptor), err
}
